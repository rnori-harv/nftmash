type Caption @aws_iam @aws_api_key {
  id: ID!
  body: String
  likes: Int
  candidateID: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  User: User @aws_iam @aws_api_key
}

type User @aws_iam @aws_api_key {
  id: ID!
  username: String
  role: String
  email: AWSEmail
  profile: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Candidate @aws_iam @aws_api_key {
  id: ID!
  likes: Int
  postTime: AWSDateTime
  source: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Captions(filter: ModelCaptionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCaptionConnection @aws_iam @aws_api_key
  Artist: User @aws_iam @aws_api_key
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCaptionConnection @aws_api_key @aws_iam {
  items: [Caption]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelCaptionFilterInput {
  id: ModelIDInput
  body: ModelStringInput
  likes: ModelIntInput
  candidateID: ModelIDInput
  and: [ModelCaptionFilterInput]
  or: [ModelCaptionFilterInput]
  not: ModelCaptionFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getCaption(id: ID!): Caption @aws_api_key @aws_iam
  listCaptions(filter: ModelCaptionFilterInput, limit: Int, nextToken: String): ModelCaptionConnection @aws_api_key @aws_iam
  syncCaptions(filter: ModelCaptionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCaptionConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
  getCandidate(id: ID!): Candidate @aws_api_key @aws_iam
  listCandidates(filter: ModelCandidateFilterInput, limit: Int, nextToken: String): ModelCandidateConnection @aws_api_key @aws_iam
  syncCandidates(filter: ModelCandidateFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCandidateConnection @aws_api_key @aws_iam
}

input CreateCaptionInput {
  id: ID
  body: String
  likes: Int
  candidateID: ID
  _version: Int
  captionUserId: ID
}

input UpdateCaptionInput {
  id: ID!
  body: String
  likes: Int
  candidateID: ID
  _version: Int
  captionUserId: ID
}

input DeleteCaptionInput {
  id: ID!
  _version: Int
}

type Mutation {
  createCaption(input: CreateCaptionInput!, condition: ModelCaptionConditionInput): Caption @aws_api_key @aws_iam
  updateCaption(input: UpdateCaptionInput!, condition: ModelCaptionConditionInput): Caption @aws_api_key @aws_iam
  deleteCaption(input: DeleteCaptionInput!, condition: ModelCaptionConditionInput): Caption @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createCandidate(input: CreateCandidateInput!, condition: ModelCandidateConditionInput): Candidate @aws_api_key @aws_iam
  updateCandidate(input: UpdateCandidateInput!, condition: ModelCandidateConditionInput): Candidate @aws_api_key @aws_iam
  deleteCandidate(input: DeleteCandidateInput!, condition: ModelCandidateConditionInput): Candidate @aws_api_key @aws_iam
}

input ModelCaptionConditionInput {
  body: ModelStringInput
  likes: ModelIntInput
  candidateID: ModelIDInput
  and: [ModelCaptionConditionInput]
  or: [ModelCaptionConditionInput]
  not: ModelCaptionConditionInput
}

type Subscription {
  onCreateCaption: Caption @aws_subscribe(mutations: ["createCaption"]) @aws_api_key @aws_iam
  onUpdateCaption: Caption @aws_subscribe(mutations: ["updateCaption"]) @aws_api_key @aws_iam
  onDeleteCaption: Caption @aws_subscribe(mutations: ["deleteCaption"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateCandidate: Candidate @aws_subscribe(mutations: ["createCandidate"]) @aws_api_key @aws_iam
  onUpdateCandidate: Candidate @aws_subscribe(mutations: ["updateCandidate"]) @aws_api_key @aws_iam
  onDeleteCandidate: Candidate @aws_subscribe(mutations: ["deleteCandidate"]) @aws_api_key @aws_iam
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  role: ModelStringInput
  email: ModelStringInput
  profile: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  username: String
  role: String
  email: AWSEmail
  profile: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  username: String
  role: String
  email: AWSEmail
  profile: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelUserConditionInput {
  username: ModelStringInput
  role: ModelStringInput
  email: ModelStringInput
  profile: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelCandidateConnection @aws_api_key @aws_iam {
  items: [Candidate]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCandidateFilterInput {
  id: ModelIDInput
  likes: ModelIntInput
  postTime: ModelStringInput
  source: ModelStringInput
  and: [ModelCandidateFilterInput]
  or: [ModelCandidateFilterInput]
  not: ModelCandidateFilterInput
}

input CreateCandidateInput {
  id: ID
  likes: Int
  postTime: AWSDateTime
  source: String
  _version: Int
  candidateArtistId: ID
}

input UpdateCandidateInput {
  id: ID!
  likes: Int
  postTime: AWSDateTime
  source: String
  _version: Int
  candidateArtistId: ID
}

input DeleteCandidateInput {
  id: ID!
  _version: Int
}

input ModelCandidateConditionInput {
  likes: ModelIntInput
  postTime: ModelStringInput
  source: ModelStringInput
  and: [ModelCandidateConditionInput]
  or: [ModelCandidateConditionInput]
  not: ModelCandidateConditionInput
}
